{"_id":"lintspaces","_rev":"54-17430a5ca86f5e5c4f7354549b952b95","name":"lintspaces","time":{"modified":"2015-03-13T18:39:06.775Z","created":"2014-04-04T09:58:45.256Z","0.1.1":"2014-04-04T10:04:35.577Z","0.1.2":"2014-04-04T17:19:03.672Z","0.1.4":"2014-04-11T17:28:41.266Z","0.2.0":"2014-07-10T16:25:12.296Z","0.2.1":"2014-07-10T19:28:21.326Z","0.2.2":"2015-03-11T16:08:08.433Z","0.2.3":"2015-03-13T18:39:06.775Z"},"maintainers":[{"name":"nrmnrsh","email":"me@nrmnrsh.com"},{"name":"cknoetschke","email":"cknoetschke@gmail.com"}],"description":"Library for checking spaces in files","readme":"# Lintspaces\n\nA node module for checking spaces in files.\n\n### Tasks\n\nIf you're looking for a\n[gruntjs](http://gruntjs.com/) or\n[gulpjs](http://gulpjs.com/)\ntask to validate your files, take a look at these ones:\n\n* [grunt-lintspaces](https://github.com/schorfES/grunt-lintspaces)\n* [gulp-lintspaces](https://github.com/ck86/gulp-lintspaces) by [ck86](https://github.com/ck86)\n\n\n### CLI\n\nThere is also a [lintspaces CLI](https://github.com/evanshortiss/lintspaces-cli)\navailable written by [evanshortiss](https://github.com/evanshortiss).\n\n## Installation\n\nThis package is available on [npm](https://www.npmjs.org/package/lintspaces)\nas: `lintspaces`\n\n``` sh\n\tnpm install lintspaces\n```\n\n## Usage\n\nTo run the lintspaces validator on one or multiple files take a look at the\nfollowing example:\n\n```javascript\n\n\tvar Validator = require('lintspaces');\n\n\tvar validator = new Validator({/* options */});\n\tvalidator.validate('/path/to/file.ext');\n\tvalidator.validate('/path/to/other/file.ext');\n\n\tvar results = validator.getInvalidFiles();\n```\n\nThe response of ```getInvalidFiles()``` contains an object. Each key of this\nobject is a filepath which contains validation errors.\n\nUnder each filepath there is an other object with at least one key. Those key(s)\nare the specific linenumbers of the file containing an array with errors.\n\nThe following lines shows the structure of the validation result in JSON\nnotation:\n\n```json\n\n\t{\n\t\t\"/path/to/file.ext\": {\n\t\t\t\"3\": [\n\t\t\t\t{\n\t\t\t\t\t\"line\": 3,\n\t\t\t\t\t\"code\": \"INDENTATION_TABS\",\n\t\t\t\t\t\"type\": \"warning\",\n\t\t\t\t\t\"message\": \"Unexpected spaces found.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"line\": 3,\n\t\t\t\t\t\"code\": \"TRAILINGSPACES\",\n\t\t\t\t\t\"type\": \"warning\",\n\t\t\t\t\t\"message\": \"Unexpected trailing spaces found.\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"12\": [\n\t\t\t\t{\n\t\t\t\t\t\"line\": 12,\n\t\t\t\t\t\"code\": \"NEWLINE\",\n\t\t\t\t\t\"type\": \"warning\",\n\t\t\t\t\t\"message\": \"Expected a newline at the end of the file.\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"/path/to/other/file.ext\": {\n\t\t\t\"5\": [\n\t\t\t\t{\n\t\t\t\t\t\"line\": 5,\n\t\t\t\t\t\"code\": \"NEWLINE_AMOUNT\",\n\t\t\t\t\t\"type\": \"warning\",\n\t\t\t\t\t\"message\": \"Unexpected additional newlines at the end of the file.\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n```\n\n## Options\n\n### newline at end of file option\n\nTests for newlines at the end of all files. Default value is `false`.\n\n```javascript\n\tnewline: true\n```\n\n* returns code ```NEWLINE```, when a missing a newline at the end of the file.\n* returns code ```NEWLINE_AMOUNT```, when found unexpected additional newlines\nat the end of a file.\n* returns type ```warning```\n\n### maximum newlines option\n\nTest for the maximum amount of newlines between code blocks. Default value is\n`false`. To enable this validation a number larger than `0` is expected.\n\n```javascript\n\tnewlineMaximum: 2\n```\n\n* returns code ```NEWLINE_MAXIMUM```, when maximum amount of newlines exceeded\nbetween code blocks.\n* returns type ```warning```\n\n### trailingspaces option\n\nTests for useless whitespaces (trailing whitespaces) at each lineending of all\nfiles. Default value is `false`.\n\n```javascript\n\ttrailingspaces: true\n```\n\n* returns code ```TRAILINGSPACES```, when unexpected trailing spaces were found.\n* returns type ```warning```\n\n**Note:** If you like to to skip empty lines from reporting (for whatever\nreason), use the option ```trailingspacesSkipBlanks``` and set them to ```true```.\n\n### indentation options\n\nTests for correct indentation using tabs or spaces. Default value is `false`.\nTo enable indentation check use the value `'tabs'` or `'spaces'`.\n\n```javascript\n\tindentation: 'tabs'\n```\n\n* returns code ```INDENTATION_TABS```, when spaces are used instead of tabs.\n* returns type ```warning```\n\nIf the indentation option is set to `'spaces'`, there is also the possibility\nto set the amount of spaces per indentation using the `spaces` option. Default\nvalue is `4`.\n\n```javascript\n\tindentation: 'spaces',\n\tspaces: 2\n```\n\n* returns code ```INDENTATION_SPACES```, when tabs are used instead of spaces.\n* returns code ```INDENTATION_SPACES_AMOUNT```, when spaces are used but the\namound is not as expected.\n* returns type ```warning```\n\n### guess indentation option\n\nThis ```indentationGuess``` option _tries to guess_ the indention of a line\ndepending on previous lines. The report of this option can be incorrect,\nbecause the _correct_ indentation depends on the actual programming language\nand styleguide of the certain file. The default value is `false` - disabled.\n\nThis feature follows the following rules: _The indentation of the current\nline is correct when:_\n\n* the amount of indentations is equal to the previous or\n* the amount of indentations is less than the previous line or\n* the amount of indentations is one more than the previous line\n* the amount of indentations is zero and the lines length is also zero which\nis an empty line without trailing whitespaces\n\n```javascript\n\tindentationGuess: true\n```\n\n* returns code ```NEWLINE_GUESS```\n* returns type ```hint```\n\n### ignores option\n\nUse the `ignores` option when special lines such as comments should be ignored.\nProvide an array of regular expressions to the `ignores` property.\n\n```javascript\n\tignores: [\n\t\t/\\/\\*[\\s\\S]*?\\*\\//g,\n\t\t/foo bar/g\n\t]\n```\n\nThere are some _**build in**_ ignores for comments which you can apply by using\nthese strings:\n\n* 'js-comments'\n* 'c-comments'\n* 'java-comments'\n* 'as-comments'\n* 'xml-comments'\n* 'html-comments'\n* 'python-comments'\n* 'ruby-comments'\n* 'applescript-comments'\n\n_(build in strings and userdefined regular expressions are mixable in the\n`ignores` array)_\n\n```javascript\n\tignores: [\n\t\t'js-comments',\n\t\t/foo bar/g\n\t]\n```\n\n_Feel free to contribute some new regular expressions as build in!_\n\n**Note:** Trailing spaces are not ignored by default, because they are always\nevil!! If you still want to ignore them use the ```trailingspacesToIgnores```\noption and set them to ```true```.\n\n### .editorconfig option\n\nIt's possible to overwrite the default and given options by setting up a path\nto an external editorconfig file by unsing the `editorconfig`option. For a basic\nconfiguration of a _.editorconfig_ file check out the\n[EditorConfig Documentation](http://editorconfig.org/).\n\n```javascript\n\teditorconfig: '.editorconfig'\n```\n\nThe following .editorconfig values are supported:\n\n* `insert_final_newline` will check if a newline is set\n* `indent_style` will check the indentation\n* `indent_size` will check the amount of spaces\n* `trim_trailing_whitespace` will check for useless whitespaces\n\n## Functions\n\nAn instance of the _Lintspaces validator_ has the following methods\n\n### ```validate(path)```\n\nThis function runs the check for a given file based on the validator settings.\n\n* **Parameter ```path```** is the path to the file as ```String```.\n* **Throws** an error when given ```path``` is not a valid path.\n* **Throws** an error when given ```path``` is not a file.\n* **Returns** ```undefined```.\n\n### ```getProcessedFiles()```\n\nThis returns the amount of processed through the validator.\n\n* **Returns** the amount as ```Number```.\n\n### ```getInvalidFiles()```\n\nThis returns all invalid lines and messages from processed files.\n\n* **Returns** each key in the returned ```Object``` represents a path of a\nprocessed invalid file. Each value is an other object containing the validation\nresult. For more informations about the returned format see [Usage](#usage).\n\n### ```getInvalidLines(path)```\n\nThis returns all invalid lines and messages from the file of the given\n```path```. This is just a shorter version of ```getInvalidFiles()[path]```.\n\n* **Parameter ```path```** is the file path\n* **Returns** each key in the returned ```Object``` represents a line from the\nfile of the given path, each value an exeption message of the current line. For\nmore informations about the returned format see [Usage](#usage).\n\n## Contribution\n\nFeel free to contribute. Please run all the tests and validation tasks befor\nyou offer a pull request.\n\n### Tests & validation\n\nRun ```grunt validate test``` to run the tests and validation tasks.\n\n### Readme\n\nThe readme chapters are located in the _docs_ directory as Markdown. All\nMarkdown files will be concatenated through a grunt task ```'docs'```. Call\n```grunt docs``` or run it fully by call ```grunt``` to validate, test and\nupdate the _README.md_.\n\n**Note:** Do not edit the _README.md_ directly, it will be overwritten!\n\n### Contributors\n\n* [ck86](https://github.com/ck86)\n* [itsananderson](https://github.com/itsananderson)\n* [ben-eb](https://github.com/ben-eb) via [grunt-lintspaces](https://github.com/schorfES/grunt-lintspaces/)\n* [yurks](https://github.com/yurks) via [grunt-lintspaces](https://github.com/schorfES/grunt-lintspaces/)\n* [evanshortiss](https://github.com/evanshortiss) via [lintspaces-cli](https://github.com/evanshortiss/lintspaces-cli)\n\n## License\n\n[LICENSE (MIT)](https://github.com/schorfES/node-lintspaces/blob/master/LICENSE)\n","versions":{"0.1.1":{"name":"lintspaces","version":"0.1.1","description":"Library for checking spaces in files","repository":{"type":"git","url":"https://github.com/schorfES/node-lintspaces.git"},"main":"index.js","scripts":{"test":"./node_modules/.bin/gulp"},"keywords":["validation","lint","spaces","trailingspaces","indent","indentation","newlines","eof","eol"],"contributors":[{"name":"Norman Rusch","url":"nrmnrsh / schorfES"},{"name":"Christopher Knötschke","email":"cknoetschke@gmail.com"}],"license":"MIT","dependencies":{"merge":"^1.1.2","editorconfig":"^0.11.4"},"devDependencies":{"should":"^3.2.0","mocha":"^1.18.2","gulp-mocha":"^0.4.1","gulp-jscs":"^0.4.0","gulp-jshint":"^1.5.3","gulp":"^3.6.0"},"bugs":{"url":"https://github.com/schorfES/node-lintspaces/issues"},"_id":"lintspaces@0.1.1","dist":{"shasum":"a9cf3faadbe543fb58251436bd4dabda348aa441","tarball":"http://registry.npmjs.org/lintspaces/-/lintspaces-0.1.1.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"nrmnrsh","email":"me@nrmnrsh.com"},"maintainers":[{"name":"nrmnrsh","email":"me@nrmnrsh.com"}],"directories":{}},"0.1.2":{"name":"lintspaces","version":"0.1.2","description":"Library for checking spaces in files","repository":{"type":"git","url":"https://github.com/schorfES/node-lintspaces.git"},"main":"index.js","scripts":{"test":"./node_modules/.bin/gulp"},"keywords":["validation","lint","spaces","trailingspaces","indent","indentation","newlines","eof","eol"],"contributors":[{"name":"Norman Rusch","url":"nrmnrsh / schorfES"},{"name":"Christopher Knötschke","email":"cknoetschke@gmail.com"}],"license":"MIT","dependencies":{"merge":"^1.1.2","editorconfig":"^0.11.4"},"devDependencies":{"should":"^3.2.0","mocha":"^1.18.2","gulp-mocha":"^0.4.1","gulp-jscs":"^0.4.0","gulp-jshint":"^1.5.3","gulp":"^3.6.0"},"bugs":{"url":"https://github.com/schorfES/node-lintspaces/issues"},"_id":"lintspaces@0.1.2","dist":{"shasum":"cdaff7f92bfd4de919696898643c30c5607ee7d6","tarball":"http://registry.npmjs.org/lintspaces/-/lintspaces-0.1.2.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"nrmnrsh","email":"me@nrmnrsh.com"},"maintainers":[{"name":"nrmnrsh","email":"me@nrmnrsh.com"},{"name":"cknoetschke","email":"cknoetschke@gmail.com"}],"directories":{}},"0.1.4":{"name":"lintspaces","version":"0.1.4","description":"Library for checking spaces in files","repository":{"type":"git","url":"https://github.com/schorfES/node-lintspaces.git"},"main":"index.js","scripts":{"test":"make test"},"keywords":["validation","lint","spaces","trailingspaces","indent","indentation","newlines","eof","eol"],"contributors":[{"name":"Norman Rusch","url":"nrmnrsh / schorfES"},{"name":"Christopher Knötschke","email":"cknoetschke@gmail.com"}],"license":"MIT","dependencies":{"merge":"^1.1.2","editorconfig":"^0.11.4"},"devDependencies":{"should":"^3.2.0","mocha":"^1.18.2","gulp-jscs":"^0.4.0","gulp-jshint":"^1.5.3","gulp":"^3.6.0","gulp-concat":"~2.2.0","gulp-clean":"~0.2.4"},"bugs":{"url":"https://github.com/schorfES/node-lintspaces/issues"},"_id":"lintspaces@0.1.4","dist":{"shasum":"c227eb3f0a998e223e8a32ecee9c94c0e7f105e4","tarball":"http://registry.npmjs.org/lintspaces/-/lintspaces-0.1.4.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"nrmnrsh","email":"me@nrmnrsh.com"},"maintainers":[{"name":"nrmnrsh","email":"me@nrmnrsh.com"},{"name":"cknoetschke","email":"cknoetschke@gmail.com"}],"directories":{}},"0.2.1":{"name":"lintspaces","version":"0.2.1","description":"Library for checking spaces in files","repository":{"type":"git","url":"https://github.com/schorfES/node-lintspaces.git"},"main":"index.js","scripts":{"test":"grunt validate test"},"keywords":["validation","lint","spaces","trailingspaces","indent","indentation","newlines","eof","eol"],"author":{"name":"Norman Rusch"},"contributors":[{"name":"Norman Rusch"},{"name":"Christopher Knötschke","email":"cknoetschke@gmail.com"}],"license":"MIT","dependencies":{"merge":"^1.1.2","editorconfig":"^0.11.4"},"devDependencies":{"grunt":"~0.4.5","grunt-contrib-nodeunit":"~0.4.0","grunt-contrib-jshint":"~0.10.0","grunt-contrib-concat":"~0.4.0","grunt-jscs-checker":"~0.5.1"},"bugs":{"url":"https://github.com/schorfES/node-lintspaces/issues"},"_id":"lintspaces@0.2.1","dist":{"shasum":"0c9463ef4b1e48a323743fa5567c81e11e648bae","tarball":"http://registry.npmjs.org/lintspaces/-/lintspaces-0.2.1.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"nrmnrsh","email":"me@nrmnrsh.com"},"maintainers":[{"name":"nrmnrsh","email":"me@nrmnrsh.com"},{"name":"cknoetschke","email":"cknoetschke@gmail.com"}],"directories":{}},"0.2.2":{"name":"lintspaces","version":"0.2.2","description":"Library for checking spaces in files","repository":{"type":"git","url":"https://github.com/schorfES/node-lintspaces.git"},"main":"index.js","scripts":{"test":"grunt validate test"},"keywords":["validation","lint","spaces","trailingspaces","indent","indentation","newlines","eof","eol"],"author":{"name":"Norman Rusch"},"contributors":[{"name":"Norman Rusch","url":"https://github.com/schorfES"},{"name":"Christopher Knötschke","url":"https://github.com/ck86"},{"name":"Will Anderson","url":"https://github.com/itsananderson"}],"license":"MIT","dependencies":{"merge":"^1.1.2","editorconfig":"^0.11.4"},"devDependencies":{"grunt":"^0.4.5","grunt-contrib-concat":"0.4.0","grunt-contrib-jshint":"0.10.0","grunt-contrib-nodeunit":"0.4.0","grunt-jscs":"1.0.0"},"gitHead":"0b9dfebaead361b313d360a76d2ccc4acff6cfa8","bugs":{"url":"https://github.com/schorfES/node-lintspaces/issues"},"homepage":"https://github.com/schorfES/node-lintspaces","_id":"lintspaces@0.2.2","_shasum":"41929c3f6e3f2cc807ae581748d50ed1f7665db0","_from":".","_npmVersion":"1.4.27","_npmUser":{"name":"nrmnrsh","email":"me@nrmnrsh.com"},"maintainers":[{"name":"nrmnrsh","email":"me@nrmnrsh.com"},{"name":"cknoetschke","email":"cknoetschke@gmail.com"}],"dist":{"shasum":"41929c3f6e3f2cc807ae581748d50ed1f7665db0","tarball":"http://registry.npmjs.org/lintspaces/-/lintspaces-0.2.2.tgz"},"directories":{}},"0.2.3":{"name":"lintspaces","version":"0.2.3","description":"Library for checking spaces in files","repository":{"type":"git","url":"https://github.com/schorfES/node-lintspaces.git"},"main":"index.js","scripts":{"test":"grunt validate test"},"keywords":["validation","lint","spaces","trailingspaces","indent","indentation","newlines","eof","eol"],"author":{"name":"Norman Rusch"},"contributors":[{"name":"Norman Rusch","url":"https://github.com/schorfES"},{"name":"Christopher Knötschke","url":"https://github.com/ck86"},{"name":"Will Anderson","url":"https://github.com/itsananderson"}],"license":"MIT","dependencies":{"merge":"1.1.2","editorconfig":"0.11.4"},"devDependencies":{"grunt":"^0.4.5","grunt-contrib-concat":"0.4.0","grunt-contrib-jshint":"0.10.0","grunt-contrib-nodeunit":"0.4.0","grunt-jscs":"1.0.0"},"gitHead":"bc9110e0a082902bf9ba01ff6c2506a9322f4ebf","bugs":{"url":"https://github.com/schorfES/node-lintspaces/issues"},"homepage":"https://github.com/schorfES/node-lintspaces","_id":"lintspaces@0.2.3","_shasum":"bcd928df01b350ca6c8d18d533e4bae11bc18ad8","_from":".","_npmVersion":"1.4.27","_npmUser":{"name":"nrmnrsh","email":"me@nrmnrsh.com"},"maintainers":[{"name":"nrmnrsh","email":"me@nrmnrsh.com"},{"name":"cknoetschke","email":"cknoetschke@gmail.com"}],"dist":{"shasum":"bcd928df01b350ca6c8d18d533e4bae11bc18ad8","tarball":"http://registry.npmjs.org/lintspaces/-/lintspaces-0.2.3.tgz"},"directories":{}}},"dist-tags":{"latest":"0.2.3"},"readmeFilename":"README.md","keywords":["validation","lint","spaces","trailingspaces","indent","indentation","newlines","eof","eol"],"repository":{"type":"git","url":"https://github.com/schorfES/node-lintspaces.git"},"contributors":[{"name":"Norman Rusch","url":"https://github.com/schorfES"},{"name":"Christopher Knötschke","url":"https://github.com/ck86"},{"name":"Will Anderson","url":"https://github.com/itsananderson"}],"bugs":{"url":"https://github.com/schorfES/node-lintspaces/issues"},"license":"MIT","users":{"nrmnrsh":true},"author":{"name":"Norman Rusch"},"homepage":"https://github.com/schorfES/node-lintspaces","_attachments":{},"_etag":"\"BHGU7NZ4DV0TGTSQLT5RBJJLF\""}